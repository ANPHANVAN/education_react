import { useState, useEffect } from 'react';
import { MiniLoading } from '../../components';
import { useParams } from 'react-router-dom';
import { ObjectId } from 'bson';
import { toast } from 'react-toastify';

const VITE_API_URL = process.env.VITE_API_URL;
// TODO: add more button add certificate
export const EditTeacherInfo = () => {
  const { classId } = useParams();
  const [preview, setPreview] = useState(null);
  const [teacherImage, setTeacherImage] = useState(null);
  const [formData, setFormData] = useState({
    titleFullname: 'Th·∫ßy Hu·ª≥nh ƒêƒÉng Phong',
    teacherSubject: 'Gi√°o vi√™n m√¥n To√°n h·ªçc',
    fullname: 'Hu·ª≥nh ƒêƒÉng Phong',
    teacherImageLink: '/uploads/thay-huynh-dang-phong.jpeg',
    degree: [
      { _id: 1, context: 'C·ª≠ nh√¢n C√¥ng Ngh·ªá Th√¥ng Tin - ƒê·∫°i h·ªçc S∆∞ ph·∫°m TP.HCM' },
      { _id: 2, context: 'C·ª≠ nh√¢n S∆∞ ph·∫°m To√°n - ƒê·∫°i h·ªçc S∆∞ ph·∫°m TP.HCM' },
    ],
    subject: 'M√¥n To√°n C·∫•p 2 & C·∫•p 3',
    workPassion:
      'L√† m·ªôt gi√°o vi√™n gi·∫£ng d·∫°y m√¥n To√°n h·ªçc t·ª´ l·ªõp 6 ƒë·∫øn l·ªõp 12, t√¥i ‚Äì th·∫ßy Hu·ª≥nh ƒêƒÉng Phong ‚Äì lu√¥n trƒÉn tr·ªü v·ªõi c√¢u h·ªèi:‚ÄúL√†m th·∫ø n√†o ƒë·ªÉ theo s√°t qu√° tr√¨nh h·ªçc t·∫≠p c·ªßa t·ª´ng h·ªçc sinh m·ªôt c√°ch hi·ªáu qu·∫£ v√† khoa h·ªçc h∆°n?‚Äù',
    part: [
      {
        _id: 1,
        title: 'üåü T√¢m huy·∫øt ngh·ªÅ nghi·ªáp',
        content: [
          {
            _id: 1,
            context:
              'L√† m·ªôt gi√°o vi√™n gi·∫£ng d·∫°y m√¥n To√°n h·ªçc t·ª´ l·ªõp 6 ƒë·∫øn l·ªõp 12, t√¥i ‚Äì th·∫ßy Hu·ª≥nh ƒêƒÉng Phong ‚Äì lu√¥n trƒÉn tr·ªü v·ªõi c√¢u h·ªèi:‚ÄúL√†m th·∫ø n√†o ƒë·ªÉ theo s√°t qu√° tr√¨nh h·ªçc t·∫≠p c·ªßa t·ª´ng h·ªçc sinh m·ªôt c√°ch hi·ªáu qu·∫£ v√† khoa h·ªçc h∆°n?‚Äù',
          },
        ],
      },
      {
        _id: 2,
        title: 'üîç Nh·ªØng v·∫•n ƒë·ªÅ trong th·ª±c ti·ªÖn gi·∫£ng d·∫°y',
        content: [
          {
            _id: 1,
            context:
              'Vi·ªác theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p, k·∫øt qu·∫£ b√†i ki·ªÉm tra, v√† m·ª©c ƒë·ªô hi·ªÉu b√†i c·ªßa h·ªçc sinh th∆∞·ªùng b·ªã r·ªùi r·∫°c v√† thi·∫øu h·ªá th·ªëng.',
          },
          {
            _id: 2,
            context:
              'Gi√°o vi√™n m·∫•t nhi·ªÅu th·ªùi gian ghi ch√©p s·ªï s√°ch th·ªß c√¥ng, g√¢y kh√≥ khƒÉn trong vi·ªác ƒë√°nh gi√° s·ª± ti·∫øn b·ªô c·ªßa h·ªçc sinh.',
          },
          {
            _id: 3,
            context:
              'Ph·ª• huynh kh√≥ n·∫Øm b·∫Øt t√¨nh h√¨nh h·ªçc t·∫≠p c·ªßa con em m√¨nh m·ªôt c√°ch k·ªãp th·ªùi v√† ch√≠nh x√°c.',
          },
        ],
      },
    ],
  });

  const fetchTeacherInfo = async () => {
    try {
      const res = await fetch(
        `${VITE_API_URL}/class-teacher/api/classroom-details/get-teacher-info/${classId}`
      );
      if (res.ok) {
        const dataTeacherInfo = await res.json();
        setFormData(dataTeacherInfo);
      } else {
        toast.error('Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin gi√°o vi√™n');
        return;
      }
    } catch (error) {
      console.error(`L·ªói l·∫•y d·ªØ li·ªáu! ${error}`);
      toast.error('Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu');
      return;
    }
  };

  const postChangeTeacherInfo = async () => {
    const data = new FormData();
    if (teacherImage) {
      data.set('teacherPhoto', teacherImage);
    }
    data.set('titleFullname', formData.titleFullname);
    data.set('teacherSubject', formData.teacherSubject);
    data.set('fullname', formData.fullname);
    data.set('subject', formData.subject);
    data.set('workPassion', formData.workPassion);
    data.set('degree', JSON.stringify(formData.degree));
    data.set('part', JSON.stringify(formData.part));

    const res = await fetch(
      `${VITE_API_URL}/class-teacher/api/classroom-details/createTeacherInfo/${classId}`,
      {
        method: 'POST',
        body: data,
      }
    );

    if (res.ok) {
      toast.success('Thay ƒë·ªïi th√¥ng tin th√†nh c√¥ng!');
      return;
    } else {
      toast.success('Thay ƒë·ªïi th√¥ng tin th·∫•t b·∫°i!');
    }
  };

  const handleChangeInputMainFormData = (e) => {
    const name = e.target.name;
    const value = e.target.value;

    setFormData((prev) => {
      return {
        ...prev,
        [name]: value,
      };
    });
  };

  const handleChangeDegree = (e) => {
    const degreeId = e.target.name;
    const value = e.target.value;

    setFormData((prev) => {
      const finalDegree = prev.degree.map((degreeItem) => {
        if (degreeItem._id == degreeId) {
          return {
            ...degreeItem,
            context: value,
          };
        }
        return degreeItem;
      });

      return {
        ...prev,
        degree: finalDegree,
      };
    });
  };

  const handleChangePartTitle = (e) => {
    const partId = e.target.id;
    const value = e.target.value;

    setFormData((prev) => {
      const finalPart = prev.part.map((partItem) => {
        if (partItem._id == partId) {
          return {
            ...partItem,
            title: value,
          };
        } else {
          return partItem;
        }
      });
      return {
        ...prev,
        part: finalPart,
      };
    });
  };

  const handleChangeContent = (e) => {
    // name={partItem._id + '_' + contentItem._id}
    const name = e.target.name;
    const contextValue = e.target.value;
    const partId = name.split('_')[0];
    const contentId = name.split('_')[1];

    setFormData((prev) => {
      const finalPart = prev.part.map((partItem) => {
        if (partItem._id == partId) {
          const newContent = partItem.content.map((contentItem) => {
            if (contentItem._id == contentId) {
              return {
                ...contentItem,
                context: contextValue,
              };
            } else {
              return contentItem;
            }
          });
          return {
            ...partItem,
            content: newContent,
          };
        } else {
          return partItem;
        }
      });

      return {
        ...prev,
        part: finalPart,
      };
    });
  };

  const handleClickDeletePart = (partId) => {
    setFormData((prev) => {
      const finalPart = prev.part.filter((partItem) => partItem._id != partId);
      return {
        ...prev,
        part: finalPart,
      };
    });
  };

  const handleClickDeleteContentItem = (partItemId, contentItemId) => {
    setFormData((prev) => {
      const finalPart = prev.part.map((partItem) => {
        if (partItem._id == partItemId) {
          const newContent = partItem.content.filter(
            (contentItem) => contentItem._id != contentItemId
          );
          return {
            ...partItem,
            content: newContent,
          };
        } else {
          return partItem;
        }
      });

      return {
        ...prev,
        part: finalPart,
      };
    });
  };

  const handleClickAddContent = (partId) => {
    setFormData((prev) => {
      const finalPart = prev.part.map((partItem) => {
        if (partItem._id == partId) {
          return {
            ...partItem,
            content: [
              ...partItem.content,
              {
                _id: new ObjectId().toString(),
                context: 'm·∫´u',
              },
            ],
          };
        } else {
          return partItem;
        }
      });
      return {
        ...prev,
        part: finalPart,
      };
    });
  };

  const handleClickAddPart = () => {
    const newObjectPart = {
      _id: new ObjectId().toString(),
      title: 'üåü M·∫´u',
      content: [
        {
          _id: new ObjectId().toString(),
          context: 'M·∫´u',
        },
      ],
    };
    setFormData((prev) => ({ ...prev, part: [...prev.part, newObjectPart] }));
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setTeacherImage(file);
      setPreview(URL.createObjectURL(file));
    }
  };

  useEffect(() => {
    fetchTeacherInfo();
  }, []);

  return (
    <div className="mx-auto max-w-5xl space-y-8 px-6 py-6">
      <div className="rounded-xl p-6 shadow-lg">
        {/* Header */}
        <h1 className="mb-6 text-center text-3xl font-bold">Ch·ªânh s·ª≠a th√¥ng tin gi√°o vi√™n</h1>

        {/* Th√¥ng tin c∆° b·∫£n */}
        <div className="grid gap-6 md:grid-cols-2">
          <div>
            <label className="mb-2 block font-semibold">Ti√™u ƒë·ªÅ</label>
            <input
              className="focus:ring-primary-to w-full rounded-lg border border-gray-300 p-3 focus:ring"
              type="text"
              name="titleFullname"
              value={formData.titleFullname}
              onChange={handleChangeInputMainFormData}
            />
          </div>
          <div>
            <label className="mb-2 block font-semibold">M√¥n gi·∫£ng d·∫°y</label>
            <input
              className="focus:ring-primary-to w-full rounded-lg border border-gray-300 p-3 focus:ring"
              type="text"
              name="teacherSubject"
              value={formData.teacherSubject}
              onChange={handleChangeInputMainFormData}
            />
          </div>
        </div>

        {/* ·∫¢nh gi√°o vi√™n */}
        <div className="mt-6">
          <p className="mb-2 font-semibold">·∫¢nh gi√°o vi√™n</p>
          <div className="flex flex-col items-center space-y-4">
            <img
              src={preview || formData.teacherImageLink}
              alt="·∫¢nh gi√°o vi√™n"
              className="h-40 w-40 rounded-full object-cover shadow-md"
            />
            <input
              onChange={handleFileChange}
              type="file"
              name="teacherPhoto"
              accept="image/*"
              className="file:bg-primary-from hover:file:bg-primary-to text-gray-500 file:rounded-lg file:border-0 file:px-4 file:py-2 file:text-white"
            />
          </div>
        </div>

        {/* B·∫±ng c·∫•p */}
        <div className="mt-6">
          <h2 className="mb-4 text-lg font-semibold">üéì B·∫±ng c·∫•p</h2>
          {formData.degree.map((degreeItem) => (
            <input
              key={degreeItem._id}
              className="focus:ring-primary-to mb-3 w-full rounded-lg border border-gray-300 p-3 focus:ring"
              type="text"
              name={degreeItem._id}
              value={degreeItem.context}
              onChange={handleChangeDegree}
            />
          ))}
        </div>

        {/* C√°c ph·∫ßn n·ªôi dung */}
        <div className="mt-8 space-y-6">
          <h2 className="text-lg font-semibold">üìå C√°c ph·∫ßn n·ªôi dung</h2>
          {formData.part.map((partItem) => (
            <div key={partItem._id} className="rounded-lg border p-4 shadow-sm">
              <input
                type="text"
                className="mb-3 w-full border-b pb-2 text-xl font-semibold focus:ring"
                value={partItem.title}
                onChange={handleChangePartTitle}
                id={partItem._id}
              />
              {partItem.content.map((contentItem) => (
                <div key={contentItem._id} className="mb-3">
                  <textarea
                    className="w-full rounded-lg border p-3 focus:ring"
                    value={contentItem.context}
                    name={partItem._id + '_' + contentItem._id}
                    onChange={handleChangeContent}
                  />
                  <button
                    onClick={() => handleClickDeleteContentItem(partItem._id, contentItem._id)}
                    className="mt-2 text-sm text-red-600 hover:text-red-800"
                  >
                    X√≥a ƒëo·∫°n
                  </button>
                </div>
              ))}
              <button
                onClick={() => handleClickAddContent(partItem._id)}
                className="text-sm text-blue-600 hover:text-blue-800"
              >
                + Th√™m ƒëo·∫°n
              </button>
            </div>
          ))}

          <button
            onClick={handleClickAddPart}
            className="mt-4 rounded-lg bg-green-500 px-4 py-2 text-white hover:bg-green-600"
          >
            + Th√™m ph·∫ßn
          </button>
        </div>
      </div>

      {/* N√∫t l∆∞u */}
      <div className="text-center">
        <button
          onClick={postChangeTeacherInfo}
          className="bg-primary-from hover:bg-primary-to cursor-pointer rounded-lg px-6 py-3 text-lg font-semibold text-white shadow-lg"
        >
          L∆∞u th√¥ng tin
        </button>
      </div>
    </div>
  );
};
