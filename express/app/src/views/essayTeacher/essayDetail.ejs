<link rel="stylesheet" href="/public/css/essayTeacherDetails.css" />

<div class="container-fluid">
  <div class="row">
    <!-- Sidebar -->
    <div class="col-md-3 sidebar"></div>

    <!-- Content -->
    <div class="col-md-9 p-4" id="class-info">
      <!-- ======================= DANH S√ÅCH L·ªöP S·ª¨ D·ª§NG ƒê·ªÄ THI ======================= -->
      <div class="col-md-9 p-4">
        <h3 class="mb-3">C√°c l·ªõp s·ª≠ d·ª•ng ƒë·ªÅ thi n√†y</h3>

        <!-- Spinner khi ƒëang t·∫£i -->
        <div id="classLoading" class="text-center my-5">
          <div class="spinner-border text-primary" role="status"></div>
        </div>

        <!-- Danh s√°ch l·ªõp -->
        <div id="classList" class="list-group"></div>

        <!-- Th√¥ng b√°o khi tr·ªëng -->
        <p id="classEmpty" class="text-muted text-center d-none">
          ƒê·ªÅ thi n√†y ch∆∞a ƒë∆∞·ª£c giao cho l·ªõp n√†o.
        </p>
      </div>
    </div>
  </div>
</div>

<!-- ‚úÖ Modal -->
<div
  class="modal fade"
  id="assignClassModal"
  tabindex="-1"
  aria-labelledby="assignClassLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="assignClassLabel">Giao b√†i ki·ªÉm tra cho l·ªõp</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>

      <div class="modal-body">
        <!-- Thanh c√¥ng c·ª• -->
        <div class="d-flex justify-content-between align-items-center mb-3 gap-2 flex-wrap">
          <button id="toggleSelectAll" class="btn btn-outline-secondary btn-sm">
            Ch·ªçn t·∫•t c·∫£ l·ªõp
          </button>

          <div class="input-group w-auto">
            <input
              id="searchClass"
              class="form-control form-control-sm"
              placeholder="T√¨m ki·∫øm l·ªõp"
            />
            <span class="input-group-text"><i class="bi bi-search"></i></span>
          </div>
        </div>

        <!-- Danh s√°ch l·ªõp -->
        <div class="table-responsive border rounded" style="max-height: 55vh; overflow: auto">
          <table class="table table-hover mb-0">
            <thead class="table-light">
              <tr>
                <th style="width: 40px"></th>
                <th>T√™n l·ªõp</th>
                <th>Kh·ªëi</th>
                <th>Sƒ© s·ªë</th>
              </tr>
            </thead>
            <tbody id="classListModel"></tbody>
          </table>
        </div>
      </div>

      <div class="modal-footer">
        <button class="btn btn-secondary" data-bs-dismiss="modal">H·ªßy</button>
        <button id="saveAssign" class="btn btn-primary">L∆∞u</button>
      </div>
    </div>
  </div>
</div>

<script>
  const essayId = new URLSearchParams(window.location.search).get('essay-id');
  let essayInformation = {};
  fetchEssaydata().then((data) => {
    if (data) {
      essayInformation = data;
    } else {
      console.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªÅ thi');
    }
  });

  async function fetchEssaydata() {
    if (!essayId) {
      console.error('Kh√¥ng t√¨m th·∫•y test ID trong URL');
      return;
    }
    try {
      const response = await fetch(`/essay-teacher/api/get-essay-detail?essay-id=${essayId}`);
      if (!response.ok) throw new Error('L·ªói t·∫£i th√¥ng tin ƒë·ªÅ thi');
      return await response.json();
    } catch (error) {
      console.error(error);
      alert('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë·ªÅ thi. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }
  const classListTbody = document.getElementById('classListModel');
  const searchInput = document.getElementById('searchClass');
  const selectAllBtn = document.getElementById('toggleSelectAll');
  const saveBtn = document.getElementById('saveAssign');
  let classesData = []; // l∆∞u to√†n b·ªô l·ªõp
  let allSelected = false;

  /** ‚õ≥ Fetch danh s√°ch l·ªõp khi m·ªü modal */
  document.getElementById('assignClassModal').addEventListener('show.bs.modal', fetchClasses);

  async function fetchClasses() {
    classListTbody.innerHTML = '<tr><td colspan="4" class="text-center py-4">ƒêang t·∫£i...</td></tr>';
    try {
      const res = await fetch('/test-teacher/api/get-classes');
      const data = await res.json();
      classesData = data; // cache d·ªØ li·ªáu
      renderClassRows(classesData); // v·∫Ω b·∫£ng
    } catch (err) {
      classListTbody.innerHTML =
        '<tr><td colspan="4" class="text-center text-danger py-4">L·ªói t·∫£i l·ªõp!</td></tr>';
      console.error(err);
    }
  }

  /** üé® Render b·∫£ng l·ªõp */
  function renderClassRows(list) {
    if (list.length == 0) {
      classListTbody.innerHTML =
        '<tr><td colspan="4" class="text-center py-4">Kh√¥ng c√≥ l·ªõp</td></tr>';
      return;
    }
    classListTbody.innerHTML = list
      .map((c) => {
        const checked = essayInformation.class?.includes(c._id) ? 'checked' : '';
        return `
        <tr>
          <td>
            <input type="checkbox" class="form-check-input class-check"
                   data-id="${c._id}" ${checked}>
          </td>
          <td>${c.class_name}</td>
          <td>${c.grade}</td>
          <td>${c.number_student}</td>
        </tr>`;
      })
      .join('');
  }

  /** üîç T√¨m ki·∫øm l·ªõp */
  searchInput.addEventListener('input', () => {
    const keyword = searchInput.value.trim().toLowerCase();
    const filtered = classesData.filter((c) => c.class_name.toLowerCase().includes(keyword));
    renderClassRows(filtered);
  });

  /** üóπ Ch·ªçn / b·ªè ch·ªçn t·∫•t c·∫£ */
  selectAllBtn.addEventListener('click', () => {
    allSelected = !allSelected;
    document.querySelectorAll('.class-check').forEach((cb) => (cb.checked = allSelected));
    selectAllBtn.textContent = allSelected ? 'B·ªè ch·ªçn t·∫•t c·∫£' : 'Ch·ªçn t·∫•t c·∫£ l·ªõp';
  });

  /** üíæ Submit */
  saveBtn.addEventListener('click', async () => {
    const selectedIds = [...document.querySelectorAll('.class-check:checked')].map(
      (cb) => cb.dataset.id
    );

    if (!selectedIds.length) {
      alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 l·ªõp!');
      return;
    }

    saveBtn.disabled = true;
    try {
      const res = await fetch(`/essay-teacher/api/put-class-in-essay`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ class_id: selectedIds, essayId: essayId }),
      });
      if (!res.ok) throw new Error('L∆∞u th·∫•t b·∫°i');
      bootstrap.Modal.getInstance(document.getElementById('assignClassModal')).hide();
      alert('Giao b√†i th√†nh c√¥ng!');
      window.location.reload();
    } catch (err) {
      alert('C√≥ l·ªói khi l∆∞u!');
      console.error(err);
    } finally {
      saveBtn.disabled = false;
    }
  });
</script>

<script>
  async function deleteTest(essayId) {
    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë·ªÅ thi n√†y?')) {
      return;
    }
    const response = await fetch(`/essay-teacher/api/delete-essay/${essayId}`, {
      method: 'DELETE',
    });
    if (response.ok) {
      alert('ƒê·ªÅ thi ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.');
      window.location.href = '/test-teacher';
    } else {
      alert('X√≥a ƒë·ªÅ thi th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }

  async function fetchEssaydata() {
    const searchQuerry = new URLSearchParams(window.location.search);
    const essayId = searchQuerry.get('essay-id');
    if (!essayId) {
      return;
    }
    const response = await fetch(`/essay-teacher/api/get-essay-detail?essay-id=${essayId}`);
    const test = await response.json();
    if (!test) {
      return;
    }
    const sidebar = document.querySelector('.sidebar');
    sidebar.innerHTML = `
            <h6 class="text-truncate"><i class="bi bi-file-earmark-text"></i>${test.title}</h6>
            <small class="text-muted">Ng∆∞·ªùi t·∫°o: ${test.teacher_owner_id.fullname}</small><br>
            <small class="text-muted">
            Ng√†y t·∫°o: ${new Date(test.createdAt).toLocaleString('vi-VN', {
              day: '2-digit',
              month: '2-digit',
              year: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              hour12: false,
            })}

            </small><br>
            <small class="text-muted">M√¥n h·ªçc: ${test.subject}</small><br>
            <small class="text-muted">Kh·ªëi: ${test.grade}</small><br>

            <hr>
            <h6>Menu</h6>
            <div class="menu-item py-2"><a href="${
              test.url_file
            }" target="_blank"> <i class="bi bi-file-earmark-pdf"></i> Xem ƒê·ªÅ Thi</a></div>
            <div onclick="deleteTest('${
              test._id
            }')" class="menu-item py-2 text-danger"><i class="bi bi-trash"></i> X√≥a ƒê·ªÅ Thi</div>

            <hr>
            <div class="d-flex justify-content-between align-items-center">
              <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#assignClassModal">
                Giao cho l·ªõp
              </button>
              </div>
            <div id="list-class-for-this-test"></div>

        `;
  }

  document.addEventListener('DOMContentLoaded', function () {
    fetchEssaydata();
  });
</script>

<!-- script load class -->
<script>
  document.addEventListener('DOMContentLoaded', loadClassList);

  async function loadClassList() {
    const urlParams = new URLSearchParams(window.location.search);
    const essayId = urlParams.get('essay-id');

    if (!essayId) return;

    const apiUrl = `/essay-teacher/api/get-essay-detail?essay-id=${essayId}`;

    const spinner = document.getElementById('classLoading');
    const listGroup = document.getElementById('classList');
    const emptyNote = document.getElementById('classEmpty');

    try {
      const res = await fetch(apiUrl);
      if (!res.ok) throw new Error('Fetch failed');

      const classEssayInfo = await res.json();
      const classes = classEssayInfo?.class || [];

      // ·∫®n spinner
      spinner.classList.add('d-none');

      if (!classes.length) {
        emptyNote.classList.remove('d-none');
        return;
      }

      // Render t·ª´ng l·ªõp
      classes.forEach((cls) => {
        listGroup.insertAdjacentHTML(
          'beforeend',
          `
          <a href="/essay-teacher/essay-class-detail?essay-id=${essayId}&class_id=${
            cls._id
          }" class="list-group-item list-group-item-action">
            <div class="d-flex w-100 justify-content-between">
              <h5 class="mb-1">${cls.class_name}</h5>
              <small class="text-muted">Sƒ© s·ªë: ${cls.number_student}</small>
            </div>
            <p class="mb-1">Kh·ªëi ${cls.grade} ‚Ä¢ NƒÉm h·ªçc ${cls.school_year}</p>
            <small class="text-muted">
              T·∫°o ng√†y ${new Date(cls.createdAt).toLocaleDateString('vi-VN')}
            </small>
          </a>
        `
        );
      });
    } catch (err) {
      console.error(err);
      spinner.classList.add('d-none');
      listGroup.innerHTML =
        '<div class="alert alert-danger">Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªõp. Vui l√≤ng th·ª≠ l·∫°i sau.</div>';
    }
  }
</script>
