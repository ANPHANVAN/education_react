<style>
  .btn-custom {
    min-width: 180px;
  }
  .doc-card {
    border: 1px solid #eee;
    border-radius: 8px;
    padding: 1rem;
    background-color: #fff;
    height: 100%;
  }
  .tag-badge {
    background-color: #0d6efd;
    color: white;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.5rem;
  }
</style>

<link rel="stylesheet" href="/public/css/classroomDetail.css" />
<!-- button stogle sidebar -->
<button id="sidebarToggle" class="btn btn-outline-secondary me-3 d-md-none">
  <i class="fas fa-bars"></i>
</button>
<div id="mobileBreak"></div>
<!-- Sidebar -->
<div class="sidebar" id="sidebar"></div>

<!-- Main Content -->
<div class="main-content">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h2 id="classTitle"></h2>
  </div>

  <!-- folder content -->
  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h3 class="mb-0">Danh s√°ch folder c·ªßa l·ªõp</h3>
      <!-- N√∫t m·ªü modal -->
      <button
        type="button"
        class="btn btn-primary"
        data-bs-toggle="modal"
        data-bs-target="#uploadModal"
      >
        Upload T√†i Li·ªáu
      </button>
    </div>
    <!-- T√¨m ki·∫øm + n√∫t t·∫°o -->
    <div class="d-flex flex-wrap gap-2 justify-content-between align-items-center mb-4">
      <!-- <input type="text" class="form-control w-auto" placeholder="T√¨m ki·∫øm" style="max-width: 300px;" hidden> -->
    </div>

    <!-- Danh s√°ch t·∫•t c·∫£ -->
    <h5 class="mb-3">T·∫•t c·∫£</h5>
    <div class="table-responsive">
      <table class="table table-hover align-middle">
        <thead class="table-light">
          <tr>
            <th>T√™n G·ª£i Nh·ªõ</th>
            <th>T√™n Files</th>
            <th>Xem File</th>
            <th>Ng√†y Upload</th>
            <th>H√†nh ƒê·ªông</th>
          </tr>
        </thead>
        <tbody class="file-teacher-list"></tbody>
      </table>
    </div>
  </div>
</div>

<!-- this is list sidebar script render -->
<script>
  function renderSidebar() {
    const sidebar = document.getElementById('sidebar');
    sidebar.innerHTML = `
  <ul class="nav flex-column">
    <li class="nav-item">
      <a class="nav-link" href="/class-teacher/classroom-details/${CLASS_ID}/">H·ªçc Sinh</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="/class-teacher/classroom-details/${CLASS_ID}/test">ƒê·ªÅ Thi</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="/class-teacher/classroom-details/${CLASS_ID}/essay">ƒê·ªÅ T·ª± Lu·∫≠n</a>
    </li>          
    <li class="nav-item">
      <a class="nav-link" href="/class-teacher/classroom-details/${CLASS_ID}/video">Video</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="/class-teacher/classroom-details/${CLASS_ID}/announce">B·∫£ng Tin</a>
    </li>
    <li class="nav-item">
      <a class="nav-link active" href="/folder/folder-teacher/${CLASS_ID}">T√†i Li·ªáu</a>
    </li>        
  </ul>
    `;
    return;
  }

  // Fetch class details from API
  async function fetchClassDetails() {
    try {
      const response = await fetch(`/class-teacher/api/classroom-details/${CLASS_ID}`);
      if (!response.ok) throw new Error('Failed to fetch class details');
      const data = await response.json();

      // Update class title
      document.getElementById(
        'classTitle'
      ).textContent = `${data.class_name} (${data.school_year})`;
    } catch (error) {
      console.error('Error fetching class details:', error);
      alert('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt l·ªõp h·ªçc. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    renderSidebar();
    fetchClassDetails();
  });
</script>

<div class="container mt-5">
  <!-- Modal -->
  <div
    class="modal fade"
    id="uploadModal"
    tabindex="-1"
    aria-labelledby="uploadModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <form id="formId" method="POST" enctype="multipart/form-data">
          <div class="modal-header">
            <h5 class="modal-title" id="uploadModalLabel">T·∫£i l√™n t√†i li·ªáu</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="ƒê√≥ng"
            ></button>
          </div>

          <div class="modal-body">
            <!-- T√™n g·ª£i nh·ªõ -->
            <div class="mb-3">
              <label for="documentName" class="form-label">T√™n g·ª£i nh·ªõ cho t√†i li·ªáu</label>
              <input
                type="text"
                class="form-control"
                id="documentName"
                name="title"
                placeholder="VD: ƒê·ªÅ thi gi·ªØa k·ª≥ To√°n"
              />
            </div>

            <!-- File upload -->
            <div class="mb-3">
              <label for="file" class="form-label">Ch·ªçn file</label>
              <input
                class="form-control"
                type="file"
                id="file"
                name="file"
                accept=".pdf,.png,.jpeg,.jpg,.docx,.xlsx"
                required
              />
            </div>
          </div>

          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">H·ªßy</button>
            <button type="submit" class="btn btn-primary">T·∫£i l√™n</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  const url = window.location.pathname;
  const CLASS_ID = url.split('/')[3];

  async function fetchFiles() {
    try {
      const response = await fetch(`/folder/api/folder-teacher/${CLASS_ID}/get-files`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
      });
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const files = await response.json();
      const listItems = document.querySelector('.file-teacher-list');
      listItems.innerHTML = ''; // Clear existing items
      files.forEach((file) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${file.title || 'no data'}</td>
            <td>${file.file_origin_name || 'no data'}</td>
            <td><a href="${file.url_file}" target="_blank">Xem File</a></td>
            <td>${new Date(file.updatedAt).toLocaleString() || 'no data'}</td>
            <td><button type="button" class="btn btn-danger" onclick="deleteFiles('${
              file._id
            }')">X√≥a File</button></td>
        `;

        listItems.appendChild(row);
      });
    } catch (error) {
      console.error('Error fetching files:', error);
    }
  }

  async function deleteFiles(file_id) {
    try {
      const res = await fetch(`/folder/api/folder-teacher/${CLASS_ID}/delete-file`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ fileId: file_id }),
      });
      if (!res.ok) {
        throw new Error('Error when delete file');
        alert('Delete File Failure');
      }
      alert('Delete Success');
      window.location.reload();
    } catch (err) {}
  }

  function navigationForm() {
    const formElement = document.getElementById('formId');
    formElement.action = action = `/folder/api/folder-teacher/${CLASS_ID}`;
  }

  document.addEventListener('DOMContentLoaded', function () {
    fetchFiles();

    const formElement = document.getElementById('formId');
    formElement.addEventListener('submit', async function (event) {
      event.preventDefault(); // üö´ ch·∫∑n form submit m·∫∑c ƒë·ªãnh

      const formData = new FormData(formElement);

      try {
        const response = await fetch(`/folder/api/folder-teacher/${CLASS_ID}`, {
          method: 'POST',
          body: formData,
        });

        if (!response.ok) throw new Error('Upload failed');

        alert('T·∫£i l√™n th√†nh c√¥ng!');
        window.location.reload(); // ho·∫∑c fetchFiles() n·∫øu mu·ªën reload d·ªØ li·ªáu m·ªõi
      } catch (error) {
        console.error('Error uploading file:', error);
        alert('L·ªói khi t·∫£i l√™n. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('sidebarToggle').addEventListener('click', () => {
      const sidebar = document.getElementById('sidebar');

      const isShowing = sidebar.classList.contains('show');
      if (isShowing) {
        sidebar.classList.remove('show');
        sidebar.classList.add('hide');
      } else {
        sidebar.classList.add('show');
        sidebar.classList.remove('hide');
      }
    });
  });
</script>

<!-- check valid input file -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const fileInput = document.getElementById('file');
    const allowedExtensions = ['.pdf', '.png', '.jpeg', '.jpg', '.docx', '.xlsx'];

    fileInput.addEventListener('change', function () {
      const file = fileInput.files[0];
      if (!file) return;

      const fileName = file.name.toLowerCase();
      const isValid = allowedExtensions.some((ext) => fileName.endsWith(ext));

      if (!isValid) {
        alert('Ch·ªâ ch·∫•p nh·∫≠n c√°c ƒë·ªãnh d·∫°ng: PDF, PNG, JPEG, JPG, DOCX, XLSX');
        fileInput.value = ''; // Reset n·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng
      }
    });
  });
</script>
